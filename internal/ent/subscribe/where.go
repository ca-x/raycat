// Code generated by ent, DO NOT EDIT.

package subscribe

import (
	"raycat/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldLTE(FieldID, id))
}

// Kind applies equality check predicate on the "kind" field. It's identical to KindEQ.
func Kind(v int) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldEQ(FieldKind, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldEQ(FieldLocation, v))
}

// Latency applies equality check predicate on the "latency" field. It's identical to LatencyEQ.
func Latency(v int64) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldEQ(FieldLatency, v))
}

// ExpireAt applies equality check predicate on the "expire_at" field. It's identical to ExpireAtEQ.
func ExpireAt(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldEQ(FieldExpireAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldEQ(FieldCreatedAt, v))
}

// KindEQ applies the EQ predicate on the "kind" field.
func KindEQ(v int) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldEQ(FieldKind, v))
}

// KindNEQ applies the NEQ predicate on the "kind" field.
func KindNEQ(v int) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldNEQ(FieldKind, v))
}

// KindIn applies the In predicate on the "kind" field.
func KindIn(vs ...int) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldIn(FieldKind, vs...))
}

// KindNotIn applies the NotIn predicate on the "kind" field.
func KindNotIn(vs ...int) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldNotIn(FieldKind, vs...))
}

// KindGT applies the GT predicate on the "kind" field.
func KindGT(v int) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldGT(FieldKind, v))
}

// KindGTE applies the GTE predicate on the "kind" field.
func KindGTE(v int) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldGTE(FieldKind, v))
}

// KindLT applies the LT predicate on the "kind" field.
func KindLT(v int) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldLT(FieldKind, v))
}

// KindLTE applies the LTE predicate on the "kind" field.
func KindLTE(v int) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldLTE(FieldKind, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldContainsFold(FieldLocation, v))
}

// LatencyEQ applies the EQ predicate on the "latency" field.
func LatencyEQ(v int64) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldEQ(FieldLatency, v))
}

// LatencyNEQ applies the NEQ predicate on the "latency" field.
func LatencyNEQ(v int64) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldNEQ(FieldLatency, v))
}

// LatencyIn applies the In predicate on the "latency" field.
func LatencyIn(vs ...int64) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldIn(FieldLatency, vs...))
}

// LatencyNotIn applies the NotIn predicate on the "latency" field.
func LatencyNotIn(vs ...int64) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldNotIn(FieldLatency, vs...))
}

// LatencyGT applies the GT predicate on the "latency" field.
func LatencyGT(v int64) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldGT(FieldLatency, v))
}

// LatencyGTE applies the GTE predicate on the "latency" field.
func LatencyGTE(v int64) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldGTE(FieldLatency, v))
}

// LatencyLT applies the LT predicate on the "latency" field.
func LatencyLT(v int64) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldLT(FieldLatency, v))
}

// LatencyLTE applies the LTE predicate on the "latency" field.
func LatencyLTE(v int64) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldLTE(FieldLatency, v))
}

// ExpireAtEQ applies the EQ predicate on the "expire_at" field.
func ExpireAtEQ(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldEQ(FieldExpireAt, v))
}

// ExpireAtNEQ applies the NEQ predicate on the "expire_at" field.
func ExpireAtNEQ(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldNEQ(FieldExpireAt, v))
}

// ExpireAtIn applies the In predicate on the "expire_at" field.
func ExpireAtIn(vs ...time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldIn(FieldExpireAt, vs...))
}

// ExpireAtNotIn applies the NotIn predicate on the "expire_at" field.
func ExpireAtNotIn(vs ...time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldNotIn(FieldExpireAt, vs...))
}

// ExpireAtGT applies the GT predicate on the "expire_at" field.
func ExpireAtGT(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldGT(FieldExpireAt, v))
}

// ExpireAtGTE applies the GTE predicate on the "expire_at" field.
func ExpireAtGTE(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldGTE(FieldExpireAt, v))
}

// ExpireAtLT applies the LT predicate on the "expire_at" field.
func ExpireAtLT(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldLT(FieldExpireAt, v))
}

// ExpireAtLTE applies the LTE predicate on the "expire_at" field.
func ExpireAtLTE(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldLTE(FieldExpireAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Subscribe) predicate.Subscribe {
	return predicate.Subscribe(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Subscribe) predicate.Subscribe {
	return predicate.Subscribe(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Subscribe) predicate.Subscribe {
	return predicate.Subscribe(sql.NotPredicates(p))
}
