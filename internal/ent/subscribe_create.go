// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"raycat/internal/ent/subscribe"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SubscribeCreate is the builder for creating a Subscribe entity.
type SubscribeCreate struct {
	config
	mutation *SubscribeMutation
	hooks    []Hook
}

// SetKind sets the "kind" field.
func (sc *SubscribeCreate) SetKind(i int) *SubscribeCreate {
	sc.mutation.SetKind(i)
	return sc
}

// SetLocation sets the "location" field.
func (sc *SubscribeCreate) SetLocation(s string) *SubscribeCreate {
	sc.mutation.SetLocation(s)
	return sc
}

// SetLatency sets the "latency" field.
func (sc *SubscribeCreate) SetLatency(i int64) *SubscribeCreate {
	sc.mutation.SetLatency(i)
	return sc
}

// SetExpireAt sets the "expire_at" field.
func (sc *SubscribeCreate) SetExpireAt(t time.Time) *SubscribeCreate {
	sc.mutation.SetExpireAt(t)
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *SubscribeCreate) SetCreatedAt(t time.Time) *SubscribeCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SubscribeCreate) SetNillableCreatedAt(t *time.Time) *SubscribeCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SubscribeCreate) SetID(u uuid.UUID) *SubscribeCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SubscribeCreate) SetNillableID(u *uuid.UUID) *SubscribeCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// Mutation returns the SubscribeMutation object of the builder.
func (sc *SubscribeCreate) Mutation() *SubscribeMutation {
	return sc.mutation
}

// Save creates the Subscribe in the database.
func (sc *SubscribeCreate) Save(ctx context.Context) (*Subscribe, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SubscribeCreate) SaveX(ctx context.Context) *Subscribe {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SubscribeCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SubscribeCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SubscribeCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := subscribe.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := subscribe.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SubscribeCreate) check() error {
	if _, ok := sc.mutation.Kind(); !ok {
		return &ValidationError{Name: "kind", err: errors.New(`ent: missing required field "Subscribe.kind"`)}
	}
	if _, ok := sc.mutation.Location(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`ent: missing required field "Subscribe.location"`)}
	}
	if _, ok := sc.mutation.Latency(); !ok {
		return &ValidationError{Name: "latency", err: errors.New(`ent: missing required field "Subscribe.latency"`)}
	}
	if _, ok := sc.mutation.ExpireAt(); !ok {
		return &ValidationError{Name: "expire_at", err: errors.New(`ent: missing required field "Subscribe.expire_at"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Subscribe.created_at"`)}
	}
	return nil
}

func (sc *SubscribeCreate) sqlSave(ctx context.Context) (*Subscribe, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SubscribeCreate) createSpec() (*Subscribe, *sqlgraph.CreateSpec) {
	var (
		_node = &Subscribe{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(subscribe.Table, sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUUID))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.Kind(); ok {
		_spec.SetField(subscribe.FieldKind, field.TypeInt, value)
		_node.Kind = value
	}
	if value, ok := sc.mutation.Location(); ok {
		_spec.SetField(subscribe.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := sc.mutation.Latency(); ok {
		_spec.SetField(subscribe.FieldLatency, field.TypeInt64, value)
		_node.Latency = value
	}
	if value, ok := sc.mutation.ExpireAt(); ok {
		_spec.SetField(subscribe.FieldExpireAt, field.TypeTime, value)
		_node.ExpireAt = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(subscribe.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// SubscribeCreateBulk is the builder for creating many Subscribe entities in bulk.
type SubscribeCreateBulk struct {
	config
	err      error
	builders []*SubscribeCreate
}

// Save creates the Subscribe entities in the database.
func (scb *SubscribeCreateBulk) Save(ctx context.Context) ([]*Subscribe, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Subscribe, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscribeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SubscribeCreateBulk) SaveX(ctx context.Context) []*Subscribe {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SubscribeCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SubscribeCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
