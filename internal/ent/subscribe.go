// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"raycat/internal/ent/subscribe"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Subscribe is the model entity for the Subscribe schema.
type Subscribe struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind subscribe.Kind `json:"kind,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// UpdateTimeoutSeconds holds the value of the "update_timeout_seconds" field.
	UpdateTimeoutSeconds int `json:"update_timeout_seconds,omitempty"`
	// Latency holds the value of the "latency" field.
	Latency int64 `json:"latency,omitempty"`
	// ExpireAt holds the value of the "expire_at" field.
	ExpireAt time.Time `json:"expire_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Subscribe) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subscribe.FieldUpdateTimeoutSeconds, subscribe.FieldLatency:
			values[i] = new(sql.NullInt64)
		case subscribe.FieldKind, subscribe.FieldLocation:
			values[i] = new(sql.NullString)
		case subscribe.FieldExpireAt, subscribe.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case subscribe.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Subscribe fields.
func (s *Subscribe) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subscribe.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case subscribe.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				s.Kind = subscribe.Kind(value.String)
			}
		case subscribe.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				s.Location = value.String
			}
		case subscribe.FieldUpdateTimeoutSeconds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_timeout_seconds", values[i])
			} else if value.Valid {
				s.UpdateTimeoutSeconds = int(value.Int64)
			}
		case subscribe.FieldLatency:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field latency", values[i])
			} else if value.Valid {
				s.Latency = value.Int64
			}
		case subscribe.FieldExpireAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expire_at", values[i])
			} else if value.Valid {
				s.ExpireAt = value.Time
			}
		case subscribe.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Subscribe.
// This includes values selected through modifiers, order, etc.
func (s *Subscribe) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// Update returns a builder for updating this Subscribe.
// Note that you need to call Subscribe.Unwrap() before calling this method if this Subscribe
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Subscribe) Update() *SubscribeUpdateOne {
	return NewSubscribeClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Subscribe entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Subscribe) Unwrap() *Subscribe {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Subscribe is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Subscribe) String() string {
	var builder strings.Builder
	builder.WriteString("Subscribe(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("kind=")
	builder.WriteString(fmt.Sprintf("%v", s.Kind))
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(s.Location)
	builder.WriteString(", ")
	builder.WriteString("update_timeout_seconds=")
	builder.WriteString(fmt.Sprintf("%v", s.UpdateTimeoutSeconds))
	builder.WriteString(", ")
	builder.WriteString("latency=")
	builder.WriteString(fmt.Sprintf("%v", s.Latency))
	builder.WriteString(", ")
	builder.WriteString("expire_at=")
	builder.WriteString(s.ExpireAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Subscribes is a parsable slice of Subscribe.
type Subscribes []*Subscribe
