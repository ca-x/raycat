// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"raycat/internal/ent/predicate"
	"raycat/internal/ent/subscribe"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeSubscribe = "Subscribe"
)

// SubscribeMutation represents an operation that mutates the Subscribe nodes in the graph.
type SubscribeMutation struct {
	config
	op                        Op
	typ                       string
	id                        *uuid.UUID
	kind                      *subscribe.Kind
	location                  *string
	update_timeout_seconds    *int
	addupdate_timeout_seconds *int
	latency                   *int64
	addlatency                *int64
	expire_at                 *time.Time
	created_at                *time.Time
	clearedFields             map[string]struct{}
	done                      bool
	oldValue                  func(context.Context) (*Subscribe, error)
	predicates                []predicate.Subscribe
}

var _ ent.Mutation = (*SubscribeMutation)(nil)

// subscribeOption allows management of the mutation configuration using functional options.
type subscribeOption func(*SubscribeMutation)

// newSubscribeMutation creates new mutation for the Subscribe entity.
func newSubscribeMutation(c config, op Op, opts ...subscribeOption) *SubscribeMutation {
	m := &SubscribeMutation{
		config:        c,
		op:            op,
		typ:           TypeSubscribe,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSubscribeID sets the ID field of the mutation.
func withSubscribeID(id uuid.UUID) subscribeOption {
	return func(m *SubscribeMutation) {
		var (
			err   error
			once  sync.Once
			value *Subscribe
		)
		m.oldValue = func(ctx context.Context) (*Subscribe, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Subscribe.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSubscribe sets the old Subscribe of the mutation.
func withSubscribe(node *Subscribe) subscribeOption {
	return func(m *SubscribeMutation) {
		m.oldValue = func(context.Context) (*Subscribe, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SubscribeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SubscribeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Subscribe entities.
func (m *SubscribeMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SubscribeMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SubscribeMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Subscribe.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetKind sets the "kind" field.
func (m *SubscribeMutation) SetKind(s subscribe.Kind) {
	m.kind = &s
}

// Kind returns the value of the "kind" field in the mutation.
func (m *SubscribeMutation) Kind() (r subscribe.Kind, exists bool) {
	v := m.kind
	if v == nil {
		return
	}
	return *v, true
}

// OldKind returns the old "kind" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldKind(ctx context.Context) (v subscribe.Kind, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKind is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKind requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKind: %w", err)
	}
	return oldValue.Kind, nil
}

// ResetKind resets all changes to the "kind" field.
func (m *SubscribeMutation) ResetKind() {
	m.kind = nil
}

// SetLocation sets the "location" field.
func (m *SubscribeMutation) SetLocation(s string) {
	m.location = &s
}

// Location returns the value of the "location" field in the mutation.
func (m *SubscribeMutation) Location() (r string, exists bool) {
	v := m.location
	if v == nil {
		return
	}
	return *v, true
}

// OldLocation returns the old "location" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldLocation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocation: %w", err)
	}
	return oldValue.Location, nil
}

// ResetLocation resets all changes to the "location" field.
func (m *SubscribeMutation) ResetLocation() {
	m.location = nil
}

// SetUpdateTimeoutSeconds sets the "update_timeout_seconds" field.
func (m *SubscribeMutation) SetUpdateTimeoutSeconds(i int) {
	m.update_timeout_seconds = &i
	m.addupdate_timeout_seconds = nil
}

// UpdateTimeoutSeconds returns the value of the "update_timeout_seconds" field in the mutation.
func (m *SubscribeMutation) UpdateTimeoutSeconds() (r int, exists bool) {
	v := m.update_timeout_seconds
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTimeoutSeconds returns the old "update_timeout_seconds" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldUpdateTimeoutSeconds(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTimeoutSeconds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTimeoutSeconds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTimeoutSeconds: %w", err)
	}
	return oldValue.UpdateTimeoutSeconds, nil
}

// AddUpdateTimeoutSeconds adds i to the "update_timeout_seconds" field.
func (m *SubscribeMutation) AddUpdateTimeoutSeconds(i int) {
	if m.addupdate_timeout_seconds != nil {
		*m.addupdate_timeout_seconds += i
	} else {
		m.addupdate_timeout_seconds = &i
	}
}

// AddedUpdateTimeoutSeconds returns the value that was added to the "update_timeout_seconds" field in this mutation.
func (m *SubscribeMutation) AddedUpdateTimeoutSeconds() (r int, exists bool) {
	v := m.addupdate_timeout_seconds
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateTimeoutSeconds resets all changes to the "update_timeout_seconds" field.
func (m *SubscribeMutation) ResetUpdateTimeoutSeconds() {
	m.update_timeout_seconds = nil
	m.addupdate_timeout_seconds = nil
}

// SetLatency sets the "latency" field.
func (m *SubscribeMutation) SetLatency(i int64) {
	m.latency = &i
	m.addlatency = nil
}

// Latency returns the value of the "latency" field in the mutation.
func (m *SubscribeMutation) Latency() (r int64, exists bool) {
	v := m.latency
	if v == nil {
		return
	}
	return *v, true
}

// OldLatency returns the old "latency" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldLatency(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLatency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLatency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLatency: %w", err)
	}
	return oldValue.Latency, nil
}

// AddLatency adds i to the "latency" field.
func (m *SubscribeMutation) AddLatency(i int64) {
	if m.addlatency != nil {
		*m.addlatency += i
	} else {
		m.addlatency = &i
	}
}

// AddedLatency returns the value that was added to the "latency" field in this mutation.
func (m *SubscribeMutation) AddedLatency() (r int64, exists bool) {
	v := m.addlatency
	if v == nil {
		return
	}
	return *v, true
}

// ResetLatency resets all changes to the "latency" field.
func (m *SubscribeMutation) ResetLatency() {
	m.latency = nil
	m.addlatency = nil
}

// SetExpireAt sets the "expire_at" field.
func (m *SubscribeMutation) SetExpireAt(t time.Time) {
	m.expire_at = &t
}

// ExpireAt returns the value of the "expire_at" field in the mutation.
func (m *SubscribeMutation) ExpireAt() (r time.Time, exists bool) {
	v := m.expire_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpireAt returns the old "expire_at" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldExpireAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpireAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpireAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpireAt: %w", err)
	}
	return oldValue.ExpireAt, nil
}

// ResetExpireAt resets all changes to the "expire_at" field.
func (m *SubscribeMutation) ResetExpireAt() {
	m.expire_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SubscribeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SubscribeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SubscribeMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the SubscribeMutation builder.
func (m *SubscribeMutation) Where(ps ...predicate.Subscribe) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SubscribeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SubscribeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Subscribe, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SubscribeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SubscribeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Subscribe).
func (m *SubscribeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SubscribeMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.kind != nil {
		fields = append(fields, subscribe.FieldKind)
	}
	if m.location != nil {
		fields = append(fields, subscribe.FieldLocation)
	}
	if m.update_timeout_seconds != nil {
		fields = append(fields, subscribe.FieldUpdateTimeoutSeconds)
	}
	if m.latency != nil {
		fields = append(fields, subscribe.FieldLatency)
	}
	if m.expire_at != nil {
		fields = append(fields, subscribe.FieldExpireAt)
	}
	if m.created_at != nil {
		fields = append(fields, subscribe.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SubscribeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case subscribe.FieldKind:
		return m.Kind()
	case subscribe.FieldLocation:
		return m.Location()
	case subscribe.FieldUpdateTimeoutSeconds:
		return m.UpdateTimeoutSeconds()
	case subscribe.FieldLatency:
		return m.Latency()
	case subscribe.FieldExpireAt:
		return m.ExpireAt()
	case subscribe.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SubscribeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case subscribe.FieldKind:
		return m.OldKind(ctx)
	case subscribe.FieldLocation:
		return m.OldLocation(ctx)
	case subscribe.FieldUpdateTimeoutSeconds:
		return m.OldUpdateTimeoutSeconds(ctx)
	case subscribe.FieldLatency:
		return m.OldLatency(ctx)
	case subscribe.FieldExpireAt:
		return m.OldExpireAt(ctx)
	case subscribe.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Subscribe field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscribeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case subscribe.FieldKind:
		v, ok := value.(subscribe.Kind)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKind(v)
		return nil
	case subscribe.FieldLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocation(v)
		return nil
	case subscribe.FieldUpdateTimeoutSeconds:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTimeoutSeconds(v)
		return nil
	case subscribe.FieldLatency:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLatency(v)
		return nil
	case subscribe.FieldExpireAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpireAt(v)
		return nil
	case subscribe.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Subscribe field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SubscribeMutation) AddedFields() []string {
	var fields []string
	if m.addupdate_timeout_seconds != nil {
		fields = append(fields, subscribe.FieldUpdateTimeoutSeconds)
	}
	if m.addlatency != nil {
		fields = append(fields, subscribe.FieldLatency)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SubscribeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case subscribe.FieldUpdateTimeoutSeconds:
		return m.AddedUpdateTimeoutSeconds()
	case subscribe.FieldLatency:
		return m.AddedLatency()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscribeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case subscribe.FieldUpdateTimeoutSeconds:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateTimeoutSeconds(v)
		return nil
	case subscribe.FieldLatency:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLatency(v)
		return nil
	}
	return fmt.Errorf("unknown Subscribe numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SubscribeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SubscribeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SubscribeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Subscribe nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SubscribeMutation) ResetField(name string) error {
	switch name {
	case subscribe.FieldKind:
		m.ResetKind()
		return nil
	case subscribe.FieldLocation:
		m.ResetLocation()
		return nil
	case subscribe.FieldUpdateTimeoutSeconds:
		m.ResetUpdateTimeoutSeconds()
		return nil
	case subscribe.FieldLatency:
		m.ResetLatency()
		return nil
	case subscribe.FieldExpireAt:
		m.ResetExpireAt()
		return nil
	case subscribe.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Subscribe field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SubscribeMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SubscribeMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SubscribeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SubscribeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SubscribeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SubscribeMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SubscribeMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Subscribe unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SubscribeMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Subscribe edge %s", name)
}
